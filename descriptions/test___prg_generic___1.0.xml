<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE program_description PUBLIC "-//Telecom Bretagne/DTD XML Praxis Program Description 3.0//EN" "http://perso.telecom-bretagne.eu/~bigaret/praxis/dtd/program_description.dtd">

<program_description export_date="2009-08-15 18:30" modification_date="2009-08-15 18:30">
  <program provider="test" name="prg_generic" version="1.0" />
  <from desc_id="S9999" />
  <description>A generic box allowing to execute commands and custom scripts
  - One to five input files, named 'infile1.xml', 'infile2.xml' etc.
  - One to five output files should be written, named 'outfile1.xml', 'outfile2.xml' etc.
  - The script, if used, will be written in the standard input (stdin).
  
Examples (python, shell script, R):

NB: all the following examples have one input file and one output file.

1. Python: a program reading the infile and numbering the lines
  
cmdline: 'python - infile1.xml outfile1.xml' (without the quotes)
Use a script: Yes
Script (until "# end"):
import sys
print "argv: ", sys.argv
# here, sys.argv[0] is '-'
input=sys.argv[1]
output=sys.argv[2]

idx=0
output=open(output, 'w')
for line in open(input):
  output.write("%i: %s"%(idx, line))
  idx += 1

output.close()
# end

Remarks:
- the cmdline launches python on the script file:
- the script reads its arguments from the command-line; another solution would be to hard-code the name "infile1.xml" and "outfile1.xml" in the script itself.

2. Shell: a script reading the infile and numbering the lines
cmdline: 'sh -s infile1.xml outfile1.xml'
Use a script: Yes
Script (until "# end"):
for n in $(seq 0 $#); do echo \$$n=${!n}; done
cat -n $1 > $2
#end

Same thing can be done without a script, using the cmdline: sh -c "cat -n infile1.xml > outfile1.xml"

3. R: a simple script numbering lines as well:
cmdline: 'R --slave --vanilla --args infile1.xml outfile2.xml'
Use a script: Yes
Script (until "# end"):
cat("command line arguments: \n");
commandArgs()
lines=readLines(commandArgs()[5], n=-1)
idx=0
for (line in lines)
{
  idx=idx+1
  cat(idx, "\t", line, "\n", file=commandArgs()[6], append=TRUE)
}
# end

</description>
  <parameters>
    <parameter id="generic_cmd" type="string">
      <name>cmdline</name>
      <description>Command-line</description>
      <position>1</position>
      <code target="cmdline">%s</code>
      <vdef />
    </parameter>
    
    <parameter id="nbInputs" ishidden="0" type="int">
      <name>Number of inputs</name>
      <description>Number of inputs</description>
      <position>2</position>
      <code/>
      <constraint>
        <description>The value should be a positive integer, lower or equal to 5</description>
        <code><![CDATA[%d > 0 && %d < 6]]></code>   
      </constraint>
      <vdef>1</vdef>
      <dep/>
    </parameter>
    
    <parameter id="nbOutputs" ishidden="0" type="int">
      <name>Number of outputs</name>
      <description>Number of outputs</description>
      <position>3</position>
      <code/>
      <constraint>
        <description>The value should be a positive integer, lower or equal to 5</description>
        <code><![CDATA[%d > 0 && %d < 6]]></code>   
      </constraint>
      <vdef>1</vdef>
      <dep/>
    </parameter>

    <parameter id="provide_script" ishidden="0" type="boolean">
      <name>Use a script? </name>
      <indent>0</indent>
      <description> Produce second output? </description>
      <position>0</position>
      <code />
      <vdef>0</vdef>
      <dep/>
    </parameter>

    <parameter id="script" ishidden="0" type="text">
      <name>Script (written into stdin)</name>
      <indent>0</indent>
      <description>The script to execute</description>
      <position>0</position>
      <code target="stdin">%s</code>
      <vdef />
      <dep>(provide_script:value="1")</dep>
    </parameter>

	<!-- infiles -->
    <parameter id="infile1" ishidden="0" type="input">
      <name>infile1.xml</name>
      <description>Input data file</description>
      <position>201</position>
      <code />
      <types>
        <type>all</type>
      </types>
      <vdef>infile1.xml</vdef>
    </parameter>

    <parameter id="infile2" ishidden="0" type="input">
      <name>infile2.xml</name>
      <description>Input data file</description>
      <position>202</position>
      <code />
      <types>
        <type>all</type>
      </types>
      <vdef>infile2.xml</vdef>
      <dep>(nbInputs:value>=2)</dep>
    </parameter>

    <parameter id="infile3" ishidden="0" type="input">
      <name>infile3.xml</name>
      <description>Input data file</description>
      <position>203</position>
      <code />
      <types>
        <type>all</type>
      </types>
      <vdef>infile3.xml</vdef>
      <dep>(nbInputs:value>=3)</dep>
    </parameter>

    <parameter id="infile4" ishidden="0" type="input">
      <name>infile4.xml</name>
      <description>Input data file</description>
      <position>204</position>
      <code />
      <types>
        <type>all</type>
      </types>
      <vdef>infile4.xml</vdef>
      <dep>(nbInputs:value>=4)</dep>
    </parameter>

    <parameter id="infile5" ishidden="0" type="input">
      <name>infile5.xml</name>
      <description>Input data file</description>
      <position>205</position>
      <code />
      <types>
        <type>all</type>
      </types>
      <vdef>infile5.xml</vdef>
      <dep>(nbInputs:value>=5)</dep>
    </parameter>

	<!-- outfiles -->
    <parameter id="outfile1" ishidden="0" type="output">
      <name>outfile1.xml</name>
      <description>Output data file</description>
      <position>301</position>
      <code />
      <types>
        <type>all</type>
      </types>
      <vdef>outfile1.xml</vdef>
    </parameter>

    <parameter id="outfile2" ishidden="0" type="output">
      <name>outfile2.xml</name>
      <description>Output data file</description>
      <position>302</position>
      <code />
      <types>
        <type>all</type>
      </types>
      <vdef>outfile2.xml</vdef>
      <dep>(nbOutputs:value>=2)</dep>
    </parameter>
    
    <parameter id="outfile3" ishidden="0" type="output">
      <name>outfile3.xml</name>
      <description>Output data file</description>
      <position>303</position>
      <code />
      <types>
        <type>all</type>
      </types>
      <vdef>outfile3.xml</vdef>
      <dep>(nbOutputs:value>=3)</dep>
    </parameter>

    <parameter id="outfile4" ishidden="0" type="output">
      <name>outfile4.xml</name>
      <description>Output data file</description>
      <position>304</position>
      <code />
      <types>
        <type>all</type>
      </types>
      <vdef>outfile4.xml</vdef>
      <dep>(nbOutputs:value>=4)</dep>
    </parameter>

    <parameter id="outfile5" ishidden="0" type="output">
      <name>outfile5.xml</name>
      <description>Output data file</description>
      <position>305</position>
      <code />
      <types>
        <type>all</type>
      </types>
      <vdef>outfile5.xml</vdef>
      <dep>(nbOutputs:value>=5)</dep>
    </parameter>
    
  </parameters>
</program_description>

